/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    tapping-term-ms = <400>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
    flavor = "balanced";
};

&lt { tapping-term-ms = <400>; };

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp ESCAPE>;
        };

        combo_bksp {
            timeout-ms = <50>;
            key-positions = <10 9 8>;
            bindings = <&kp BACKSPACE>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <13 14 15>;
        };

        combo_shift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <25 26 27>;
        };

        combo_delete {
            bindings = <&kp DELETE>;
            key-positions = <21 22 20>;
        };

        combo_rshift {
            bindings = <&kp RIGHT_SHIFT>;
            key-positions = <33 34 32>;
        };

        exclm {
            bindings = <&kp EXCLAMATION>;
            key-positions = <1 13>;
        };

        at {
            bindings = <&kp AT_SIGN>;
            key-positions = <2 14>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <3 15>;
        };

        dllr {
            bindings = <&kp DOLLAR>;
            key-positions = <4 16>;
        };

        percnt {
            bindings = <&kp PERCENT>;
            key-positions = <5 17>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <6 18>;
        };

        and {
            bindings = <&kp AMPERSAND>;
            key-positions = <7 19>;
        };

        str {
            bindings = <&kp ASTERISK>;
            key-positions = <8 20>;
        };

        leftparen {
            bindings = <&kp LPAR>;
            key-positions = <9 21>;
        };

        rparen {
            bindings = <&kp RPAR>;
            key-positions = <10 22>;
        };

        layout_switch {
            bindings = <&tog 1>;
            key-positions = <36 37 40 41>;
        };

        system_reset {
            bindings = <&sys_reset>;
            key-positions = <3 4 5 14>;
        };

        bootloader {
            bindings = <&bootloader>;
            key-positions = <15 16 17 26>;
        };

        system_layer_combo {
            bindings = <&mo 4>;
            key-positions = <36 37 38>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    keymap {
        compatible = "zmk,keymap";

        vim {
            bindings = <
&trans  &trans     &kp K_MUTE  &kp C_VOL_DN                 &kp C_VOL_UP  &kp C_BRI_UP       &kp RC(C)       &kp RC(Z)       &to 1         &kp RC(RS(Z))    &kp RC(V)          &trans
&trans  &kp LSHFT  &kp LCTRL   &kp LALT                     &kp LGUI      &kp C_BRI_DN       &kp LEFT        &mt END DOWN    &mt HOME UP   &kp RIGHT        &kp RG(SPACE)      &trans
&trans  &trans     &trans      &trans                       &mkp MB1      &mkp MB2           &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &kp RG(RS(SPACE))  &trans
                               &mt LC(LS(LEFT_ALT)) ESCAPE  &lt 2 TAB     &lt 3 LG(SPACE)    &lt 3 BSPC      &lt 2 RET       &key_repeat
            >;
        };

        insert {
            bindings = <
&trans  &kp Q             &kp W        &kp E           &kp R       &kp T     &kp Y   &kp U       &kp I            &kp O        &kp P                 &trans
&trans  &mt LEFT_SHIFT A  &mt LCTRL S  &mt LEFT_ALT D  &mt LGUI F  &kp G     &kp H   &mt RGUI J  &mt RIGHT_ALT K  &mt RCTRL L  &mt RIGHT_SHIFT SEMI  &trans
&trans  &kp Z             &kp X        &kp C           &kp V       &kp B     &kp N   &kp M       &kp COMMA        &kp DOT      &kp FSLH              &trans
                                       &trans          &trans      &trans    &trans  &trans      &trans
            >;
        };

        sym {
            bindings = <
&trans  &kp EXCL                 &kp AT          &kp POUND      &kp DOLLAR          &kp PERCENT    &kp PLUS   &kp LBRC            &kp RBRC            &kp DQT        &kp AMPERSAND     &trans
&trans  &mt LEFT_SHIFT QUESTION  &mt LCTRL FSLH  &mt LALT PIPE  &mt LGUI BACKSLASH  &kp UNDER      &kp MINUS  &mt RIGHT_GUI LBKT  &mt RIGHT_ALT RBKT  &mt RCTRL SQT  &mt RSHIFT COLON  &trans
&trans  &kp TILDE                &kp LT          &kp CARET      &kp GT              &none          &kp EQUAL  &kp LPAR            &kp RPAR            &kp GRAVE      &kp ASTERISK      &trans
                                                 &trans         &trans              &trans         &trans     &trans              &trans
            >;
        };

        fun_layer {
            bindings = <
&trans  &kp SPACE  &kp UP_ARROW     &kp ENTER       &kp PAGE_UP    &kp C_VOL_UP    &kp C_BRIGHTNESS_INC  &kp F1  &kp F4  &kp F7  &kp F10  &trans
&trans  &kp LEFT   &kp DOWN         &kp RIGHT       &kp HOME       &kp C_MUTE      &kp C_PLAY_PAUSE      &kp F2  &kp F5  &kp F8  &kp F11  &trans
&trans  &kp INS    &kp PRINTSCREEN  &kp SCROLLLOCK  &kp PAGE_DOWN  &kp C_VOL_DN    &kp C_BRIGHTNESS_DEC  &kp F3  &kp F6  &kp F9  &kp F12  &trans
                                    &trans          &trans         &trans          &trans                &trans  &trans
            >;
        };

        sys_layer {
            bindings = <
&trans  &bt BT_CLR    &bt BT_CLR_ALL  &bt BT_PRV    &bt BT_NXT    &trans          &none   &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &none   &none   &none   &none   &trans
&trans  &bootloader   &sys_reset      &none         &none         &none           &none   &trans  &trans  &trans  &trans  &trans
                                      &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };
    };
};
