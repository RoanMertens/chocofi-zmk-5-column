/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    tapping-term-ms = <400>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
    flavor = "balanced";
};

&lt { tapping-term-ms = <400>; };

/ {
    combos {
        compatible = "zmk,combos";

        to_vim {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&to 0>;
            layers = <1>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        to_system {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        vim {
            bindings = <
&trans  &trans     &kp K_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_BRI_UP    &kp RC(C)       &kp RG(Z)       &to 1         &kp RS(RG(Z))    &kp RC(V)          &trans
&trans  &kp LSHFT  &kp LCTRL   &kp LALT      &kp LGUI      &kp C_BRI_DN    &kp LEFT        &mt END DOWN    &mt HOME UP   &kp RIGHT        &kp RG(SPACE)      &trans
&trans  &trans     &trans      &trans        &mkp MB1      &mkp MB2        &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &kp RG(RS(SPACE))  &trans
                               &kp ESCAPE    &lt 2 TAB     &lt 3 SPACE     &lt 3 BSPC      &lt 2 RET       &key_repeat
            >;
        };

        insert {
            bindings = <
&trans  &kp Q             &kp W        &kp E           &kp R       &kp T     &kp Y   &kp U       &kp I            &kp O        &kp P                 &trans
&trans  &mt LEFT_SHIFT A  &mt LCTRL S  &mt LEFT_ALT D  &mt LGUI F  &kp G     &kp H   &mt RGUI J  &mt RIGHT_ALT K  &mt RCTRL L  &mt RIGHT_SHIFT SEMI  &trans
&trans  &kp Z             &kp X        &kp C           &kp V       &kp B     &kp N   &kp M       &kp COMMA        &kp DOT      &kp FSLH              &trans
                                       &trans          &trans      &trans    &trans  &trans      &trans
            >;
        };

        sym {
            bindings = <
&trans  &kp EXCL                 &kp AT               &kp POUND      &kp DOLLAR     &kp PERCENT    &kp PLUS   &kp LBRC            &kp RBRC            &kp DQT        &kp AMPERSAND     &trans
&trans  &mt LEFT_SHIFT QUESTION  &mt LCTRL BACKSLASH  &mt LALT PIPE  &mt LGUI FSLH  &kp UNDER      &kp MINUS  &mt RIGHT_GUI LBKT  &mt RIGHT_ALT RBKT  &mt RCTRL SQT  &mt RSHIFT COLON  &trans
&trans  &kp TILDE                &kp LT               &kp CARET      &kp GT         &none          &kp EQUAL  &kp LPAR            &kp RPAR            &kp GRAVE      &kp ASTERISK      &trans
                                                      &trans         &trans         &trans         &trans     &trans              &trans
            >;
        };

        num {
            bindings = <
&trans  &kp F1        &kp F2        &kp F3       &kp F4       &kp F5           &none   &kp N7                  &kp N8            &kp N9              &none            &trans
&trans  &mt LSHFT F6  &mt LCTRL F7  &mt LALT F8  &mt LGUI F9  &kp F10          &none   &mt RIGHT_GUI NUMBER_4  &mt RIGHT_ALT N5  &mt RCTRL NUMBER_6  &kp RIGHT_SHIFT  &trans
&trans  &kp F11       &kp F12       &none        &kp PSCRN    &kp LG(PSCRN)    &kp N0  &kp NUMBER_1            &kp NUMBER_2      &kp NUMBER_3        &none            &trans
                                    &trans       &trans       &trans           &trans  &trans                  &trans
            >;
        };

        sys {
            bindings = <
&trans  &bt BT_CLR    &bt BT_CLR_ALL  &bt BT_PRV    &bt BT_NXT    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &bootloader   &sys_reset      &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                      &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };
    };
};
